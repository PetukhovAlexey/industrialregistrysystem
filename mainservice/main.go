package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"log"
	"net"
	"os"
	"sync"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/peer"
	"industrialregistrysystem/base/api"
	"industrialregistrysystem/mainservice/cache"
)

// DatabaseConnection –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
type DatabaseConnection struct {
	ServiceID    string
	DNSName      string
	ConnectedAt  time.Time
	PeerInfo     *peer.Peer
	CommandChan  chan *api.CommandRequest  // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ —ç—Ç–æ–π –ë–î
	ResponseChan chan *api.CommandResponse // –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —ç—Ç–æ–π –ë–î
}

// DatabaseRegistry —Ä–µ–µ—Å—Ç—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
type DatabaseRegistry struct {
	mu          sync.RWMutex
	connections map[string]*DatabaseConnection
}

func NewDatabaseRegistry() *DatabaseRegistry {
	return &DatabaseRegistry{
		connections: make(map[string]*DatabaseConnection),
	}
}

// RegisterDatabase —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
func (registry *DatabaseRegistry) RegisterDatabase(ctx context.Context, serviceID string) (*DatabaseConnection, error) {
	peerInfo, ok := peer.FromContext(ctx)
	if !ok {
		return nil, fmt.Errorf("no peer information in context")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º TLS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	tlsAuth, ok := peerInfo.AuthInfo.(credentials.TLSInfo)
	if !ok {
		return nil, fmt.Errorf("connection is not using TLS")
	}

	if len(tlsAuth.State.PeerCertificates) == 0 {
		return nil, fmt.Errorf("no client certificate provided")
	}

	clientCertificate := tlsAuth.State.PeerCertificates[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –¥–ª—è —Ä–æ–ª–∏ database
	dnsName, valid := registry.validateDatabaseCertificate(clientCertificate)
	if !valid {
		return nil, fmt.Errorf("invalid database certificate: DNSNames=%v, OU=%v",
			clientCertificate.DNSNames, clientCertificate.Subject.OrganizationalUnit)
	}

	connection := &DatabaseConnection{
		ServiceID:    serviceID,
		DNSName:      dnsName,
		ConnectedAt:  time.Now(),
		PeerInfo:     peerInfo,
		CommandChan:  make(chan *api.CommandRequest, 100),
		ResponseChan: make(chan *api.CommandResponse, 100),
	}

	registry.mu.Lock()
	registry.connections[serviceID] = connection
	registry.mu.Unlock()

	log.Printf("‚úÖ Database registered: %s (DNS: %s, Addr: %s)",
		serviceID, connection.DNSName, peerInfo.Addr.String())

	return connection, nil
}

// RegisterDatabaseFromStream —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CommandStream
func (registry *DatabaseRegistry) RegisterDatabaseFromStream(stream context.Context, serviceID string) (*DatabaseConnection, error) {
	peerInfo, ok := peer.FromContext(stream)
	if !ok {
		return nil, fmt.Errorf("no peer information in stream context")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º TLS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	tlsAuth, ok := peerInfo.AuthInfo.(credentials.TLSInfo)
	if !ok {
		return nil, fmt.Errorf("connection is not using TLS")
	}

	if len(tlsAuth.State.PeerCertificates) == 0 {
		return nil, fmt.Errorf("no client certificate provided")
	}

	clientCertificate := tlsAuth.State.PeerCertificates[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –¥–ª—è —Ä–æ–ª–∏ database
	dnsName, valid := registry.validateDatabaseCertificate(clientCertificate)
	if !valid {
		return nil, fmt.Errorf("invalid database certificate: DNSNames=%v, OU=%v",
			clientCertificate.DNSNames, clientCertificate.Subject.OrganizationalUnit)
	}

	connection := &DatabaseConnection{
		ServiceID:    serviceID,
		DNSName:      dnsName,
		ConnectedAt:  time.Now(),
		PeerInfo:     peerInfo,
		CommandChan:  make(chan *api.CommandRequest, 100),
		ResponseChan: make(chan *api.CommandResponse, 100),
	}

	registry.mu.Lock()
	registry.connections[serviceID] = connection
	registry.mu.Unlock()

	log.Printf("‚úÖ Database registered from stream: %s (DNS: %s, Addr: %s)",
		serviceID, connection.DNSName, peerInfo.Addr.String())

	return connection, nil
}

// validateDatabaseCertificate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ë–î
func (registry *DatabaseRegistry) validateDatabaseCertificate(certificate *x509.Certificate) (string, bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS Names
	if len(certificate.DNSNames) == 0 {
		return "", false
	}

	// –ò—â–µ–º DNS Name, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	var databaseDNS string
	for _, dnsName := range certificate.DNSNames {
		if dnsName == "database" || dnsName == "database.industrialregistrysystem" {
			databaseDNS = dnsName
			break
		}
	}

	if databaseDNS == "" {
		return "", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Organizational Unit
	hasDatabaseOU := false
	for _, organizationalUnit := range certificate.Subject.OrganizationalUnit {
		if organizationalUnit == "Database" {
			hasDatabaseOU = true
			break
		}
	}

	if !hasDatabaseOU {
		return "", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Organization
	hasCorrectOrganization := false
	for _, organization := range certificate.Subject.Organization {
		if organization == "IndustrialRegistrySystem" {
			hasCorrectOrganization = true
			break
		}
	}

	return databaseDNS, hasCorrectOrganization
}

// GetDatabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–æ ID
func (registry *DatabaseRegistry) GetDatabase(serviceID string) (*DatabaseConnection, bool) {
	registry.mu.RLock()
	defer registry.mu.RUnlock()

	connection, exists := registry.connections[serviceID]
	return connection, exists
}

// ListDatabases –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ë–î
func (registry *DatabaseRegistry) ListDatabases() []*DatabaseConnection {
	registry.mu.RLock()
	defer registry.mu.RUnlock()

	connections := make([]*DatabaseConnection, 0, len(registry.connections))
	for _, connection := range registry.connections {
		connections = append(connections, connection)
	}

	return connections
}

// RemoveDatabase —É–¥–∞–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
func (registry *DatabaseRegistry) RemoveDatabase(serviceID string) {
	registry.mu.Lock()
	defer registry.mu.Unlock()

	if connection, exists := registry.connections[serviceID]; exists {
		log.Printf("üóëÔ∏è Database unregistered: %s (DNS: %s)", serviceID, connection.DNSName)
		close(connection.CommandChan)
		close(connection.ResponseChan)
		delete(registry.connections, serviceID)
	}
}

// SendCommandToDatabase –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (registry *DatabaseRegistry) SendCommandToDatabase(serviceID string, command *api.CommandRequest) error {
	registry.mu.RLock()
	connection, exists := registry.connections[serviceID]
	registry.mu.RUnlock()

	if !exists {
		return fmt.Errorf("database with ID %s not found", serviceID)
	}

	select {
	case connection.CommandChan <- command:
		log.Printf("üì§ Command sent to database %s: %s", serviceID, command.RequestId)
		return nil
	case <-time.After(5 * time.Second):
		return fmt.Errorf("timeout sending command to database %s", serviceID)
	}
}

// UserDataService —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞: DataService –∏ DatabaseService
type UserDataService struct {
	api.UnimplementedDataServiceServer
	api.UnimplementedDatabaseServiceServer
	cache            cache.Cache
	databaseRegistry *DatabaseRegistry
	pendingRequests  sync.Map // map[string]chan *api.CommandResponse - –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
}

func NewUserDataService() *UserDataService {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
	cacheWithMetrics := cache.NewFIFO3CacheWithMetrics(1000)
	
	return &UserDataService{
		cache:            cacheWithMetrics,
		databaseRegistry: NewDatabaseRegistry(),
	}
}

// RegisterDatabase —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
func (service *UserDataService) RegisterDatabase(ctx context.Context, request *api.DatabaseRegistrationRequest) (*api.DatabaseRegistrationResponse, error) {
	connection, err := service.databaseRegistry.RegisterDatabase(ctx, request.ServiceId)
	if err != nil {
		log.Printf("‚ùå Database registration failed: %v", err)
		return &api.DatabaseRegistrationResponse{
			Success:      false,
			ErrorMessage: err.Error(),
		}, nil
	}

	log.Printf("‚úÖ Database %s ready to receive commands", request.ServiceId)

	return &api.DatabaseRegistrationResponse{
		Success:    true,
		ServiceId:  connection.ServiceID,
		CommonName: connection.DNSName,
		Timestamp:  connection.ConnectedAt.Format(time.RFC3339),
	}, nil
}

// CommandStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –∫–æ–º–∞–Ω–¥ - –°–ï–†–í–ï–† –û–¢–ü–†–ê–í–õ–Ø–ï–¢ CommandRequest, –ö–õ–ò–ï–ù–¢–´ –û–¢–ü–†–ê–í–õ–Ø–Æ–¢ CommandResponse
func (service *UserDataService) CommandStream(stream api.DatabaseService_CommandStreamServer) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
	peerInfo, ok := peer.FromContext(stream.Context())
	if !ok {
		return fmt.Errorf("no peer information in context")
	}

	log.Printf("üîó New command stream connection from: %s", peerInfo.Addr.String())

	// –ü–æ–ª—É—á–∞–µ–º ServiceID –∏–∑ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
	serviceID := service.getServiceIDFromContext(stream.Context())
	if serviceID == "" {
		return fmt.Errorf("cannot determine service ID from certificate")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
	_, exists := service.databaseRegistry.GetDatabase(serviceID)
	if !exists {
		// –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø–æ—Ç–æ–∫–∞
		log.Printf("üìù Auto-registering database from stream: %s", serviceID)
		_, err := service.databaseRegistry.RegisterDatabaseFromStream(stream.Context(), serviceID)
		if err != nil {
			log.Printf("‚ùå Failed to auto-register database %s: %v", serviceID, err)
			return err
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
	connection, exists := service.databaseRegistry.GetDatabase(serviceID)
	if !exists {
		return fmt.Errorf("database %s not found after registration", serviceID)
	}

	log.Printf("üîß Database %s connected to command stream", serviceID)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–ª–∏–µ–Ω—Ç—É
	go func() {
		for command := range connection.CommandChan {
			log.Printf("üì§ Sending command to database %s: %s", serviceID, command.RequestId)
			if err := stream.Send(command); err != nil {
				log.Printf("‚ùå Failed to send command to database %s: %v", serviceID, err)
				return
			}
		}
	}()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	for {
		// –ü–æ–ª—É—á–∞–µ–º CommandResponse –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
		commandResponse, receiveError := stream.Recv()
		if receiveError != nil {
			log.Printf("‚ùå Error receiving from database %s: %v", serviceID, receiveError)
			
			// –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
			service.databaseRegistry.RemoveDatabase(serviceID)
			return receiveError
		}

		log.Printf("üì® Received response from database %s for request: %s", serviceID, commandResponse.RequestId)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		service.processDatabaseResponse(commandResponse)
	}
}

// getServiceIDFromContext –∏–∑–≤–ª–µ–∫–∞–µ—Ç ServiceID –∏–∑ TLS –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func (service *UserDataService) getServiceIDFromContext(ctx context.Context) string {
	peerInfo, ok := peer.FromContext(ctx)
	if !ok {
		return ""
	}

	tlsAuth, ok := peerInfo.AuthInfo.(credentials.TLSInfo)
	if !ok || len(tlsAuth.State.PeerCertificates) == 0 {
		return ""
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π DNS Name –∫–∞–∫ ServiceID
	// –í —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ database DNSNames –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "database"
	cert := tlsAuth.State.PeerCertificates[0]
	if len(cert.DNSNames) > 0 {
		return cert.DNSNames[0]
	}
	
	return ""
}

// processDatabaseResponse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (service *UserDataService) processDatabaseResponse(response *api.CommandResponse) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω –∏ —Ç.–¥.
	log.Printf("üîß Processing response for request: %s", response.RequestId)
	
	// –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
	if response.Response != nil {
		cacheKey := service.generateCacheKey(response.RequestId, response.Response)
		if cacheKey != "" {
			service.cache.Set(cacheKey, response)
			log.Printf("üíæ Response cached with key: %s", cacheKey)
		}
	}
	
	// –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
	switch response.Response.(type) {
	case *api.CommandResponse_Organization:
		log.Printf("üìä Received organization data for request: %s", response.RequestId)
	case *api.CommandResponse_User:
		log.Printf("üë§ Received user data for request: %s", response.RequestId)
	case *api.CommandResponse_Entity:
		log.Printf("üìÑ Received entity data for request: %s", response.RequestId)
	case *api.CommandResponse_List:
		log.Printf("üìã Received list data for request: %s", response.RequestId)
	case *api.CommandResponse_Error:
		errorResp := response.GetError()
		log.Printf("‚ùå Received error for request %s: %s", response.RequestId, errorResp.Message)
	case *api.CommandResponse_Ready:
		readyResp := response.GetReady()
		log.Printf("‚úÖ Received ready message for request %s: %s", response.RequestId, readyResp.ServiceName)
	default:
		log.Printf("üì® Received response type for request %s", response.RequestId)
	}
}

// generateCacheKey –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
func (service *UserDataService) generateCacheKey(requestId string, response interface{}) string {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
	switch resp := response.(type) {
	case *api.CommandResponse_Organization:
		if org := resp.Organization; org != nil && org.Organization != nil {
			return fmt.Sprintf("org:%d", org.Organization.Id)
		}
	case *api.CommandResponse_User:
		if user := resp.User; user != nil && user.User != nil {
			return fmt.Sprintf("user:%d", user.User.Id)
		}
	case *api.CommandResponse_Entity:
		if entityResp := resp.Entity; entityResp != nil && entityResp.Entity != nil {
			// –î–ª—è Entity –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é table_name –∏ –ø–æ–ª–µ–π
			if id, ok := entityResp.Entity.Fields["id"]; ok {
				return fmt.Sprintf("entity:%s:%s", entityResp.TableName, id)
			}
		}
	}
	return ""
}

// ExecuteCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (service *UserDataService) ExecuteCommand(ctx context.Context, request *api.CommandRequest) (*api.CommandResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
	if cachedResponse, found := service.tryGetFromCache(request); found {
		log.Printf("üíæ Using cached response for request: %s", request.RequestId)
		return cachedResponse, nil
	}

	// –í—ã–±–∏—Ä–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
	databases := service.databaseRegistry.ListDatabases()
	if len(databases) == 0 {
		return nil, fmt.Errorf("no databases available")
	}

	// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ë–î
	targetDatabase := databases[0].ServiceID

	log.Printf("üîß Executing command via database %s: %s", targetDatabase, request.RequestId)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ë–î
	err := service.databaseRegistry.SendCommandToDatabase(targetDatabase, request)
	if err != nil {
		return nil, fmt.Errorf("failed to send command to database: %v", err)
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ë–î
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SystemResponse
	return &api.CommandResponse{
		RequestId: request.RequestId,
		Response: &api.CommandResponse_System{
			System: &api.SystemResponse{
				Success: true,
				Message: "Command sent to database for processing",
				Data:    map[string]string{"database": targetDatabase},
			},
		},
	}, nil
}

// tryGetFromCache –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞
func (service *UserDataService) tryGetFromCache(request *api.CommandRequest) (*api.CommandResponse, bool) {
	var cacheKey string
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
	switch cmd := request.Command.(type) {
	case *api.CommandRequest_GetOrganization:
		if cmd.GetOrganization != nil {
			// –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ oneof
			switch identifier := cmd.GetOrganization.Identifier.(type) {
			case *api.GetOrganizationRequest_Id:
				cacheKey = fmt.Sprintf("org:%d", identifier.Id)
			case *api.GetOrganizationRequest_Inn:
				cacheKey = fmt.Sprintf("org:inn:%s", identifier.Inn)
			}
		}
	case *api.CommandRequest_GetUser:
		if cmd.GetUser != nil {
			// –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ oneof
			switch identifier := cmd.GetUser.Identifier.(type) {
			case *api.GetUserRequest_Id:
				cacheKey = fmt.Sprintf("user:%d", identifier.Id)
			case *api.GetUserRequest_Email:
				cacheKey = fmt.Sprintf("user:email:%s", identifier.Email)
			}
		}
	case *api.CommandRequest_Get:
		if cmd.Get != nil {
			if cmd.Get.Id != 0 {
				cacheKey = fmt.Sprintf("entity:%s:%d", cmd.Get.TableName, cmd.Get.Id)
			}
		}
	}
	
	if cacheKey == "" {
		return nil, false
	}
	
	if cached, found := service.cache.Get(cacheKey); found {
		if response, ok := cached.(*api.CommandResponse); ok {
			return response, true
		}
	}
	
	return nil, false
}

// –ú–µ—Ç–æ–¥—ã DataService - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ExecuteCommand –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –ë–î
func (service *UserDataService) GetOrganization(ctx context.Context, request *api.GetOrganizationRequest) (*api.OrganizationResponse, error) {
	command := &api.CommandRequest{
		RequestId: fmt.Sprintf("org_%d", time.Now().UnixNano()),
		Command: &api.CommandRequest_GetOrganization{
			GetOrganization: request,
		},
	}

	response, err := service.ExecuteCommand(ctx, command)
	if err != nil {
		return nil, err
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç
	if orgResponse := response.GetOrganization(); orgResponse != nil {
		return orgResponse, nil
	}

	return nil, fmt.Errorf("invalid response type")
}

func (service *UserDataService) GetUser(ctx context.Context, request *api.GetUserRequest) (*api.UserResponse, error) {
	command := &api.CommandRequest{
		RequestId: fmt.Sprintf("user_%d", time.Now().UnixNano()),
		Command: &api.CommandRequest_GetUser{
			GetUser: request,
		},
	}

	response, err := service.ExecuteCommand(ctx, command)
	if err != nil {
		return nil, err
	}

	if userResponse := response.GetUser(); userResponse != nil {
		return userResponse, nil
	}

	return nil, fmt.Errorf("invalid response type")
}

// GetCacheMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
func (service *UserDataService) GetCacheMetrics() string {
	if metricsCache, ok := service.cache.(cache.CacheWithMetrics); ok {
		metrics := metricsCache.GetMetrics()
		return metrics.String()
	}
	
	// –ï—Å–ª–∏ –∫—ç—à –±–µ–∑ –º–µ—Ç—Ä–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	l1, l2, l3, total := service.cache.GetStats()
	return fmt.Sprintf("Cache Stats: Level1=%d, Level2=%d, Level3=%d, Total=%d/%d", 
		l1, l2, l3, total, service.cache.MaxSize())
}

// ClearCache –æ—á–∏—â–∞–µ—Ç –∫—ç—à
func (service *UserDataService) ClearCache() {
	service.cache.Clear()
	log.Printf("üóëÔ∏è Cache cleared")
}

// RemoveFromCache —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫—ç—à–∞
func (service *UserDataService) RemoveFromCache(key string) {
	service.cache.Remove(key)
	log.Printf("üóëÔ∏è Cache item removed: %s", key)
}

// loadTLSCredentials –∑–∞–≥—Ä—É–∂–∞–µ—Ç TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func loadTLSCredentials() (credentials.TransportCredentials, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞
	serverCertificate, serverError := tls.LoadX509KeyPair("certs/mainservice/mainservice-fullchain.crt", "certs/mainservice/mainservice.key")
	if serverError != nil {
		return nil, fmt.Errorf("failed to load server certificates: %v", serverError)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
	caCertificate, caError := os.ReadFile("certs/ca/ca.crt")
	if caError != nil {
		return nil, fmt.Errorf("failed to read CA certificate: %v", caError)
	}

	certificatePool := x509.NewCertPool()
	if !certificatePool.AppendCertsFromPEM(caCertificate) {
		return nil, fmt.Errorf("failed to add CA certificate to pool")
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
	tlsConfig := &tls.Config{
		Certificates: []tls.Certificate{serverCertificate},
		ClientAuth:   tls.RequireAndVerifyClientCert,
		ClientCAs:    certificatePool,
		MinVersion:   tls.VersionTLS12,
	}

	return credentials.NewTLS(tlsConfig), nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º TLS credentials
	tlsCredentials, credentialsError := loadTLSCredentials()
	if credentialsError != nil {
		log.Fatalf("‚ùå Failed to load TLS credentials: %v", credentialsError)
	}

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä —Å TLS
	grpcServer := grpc.NewServer(
		grpc.Creds(tlsCredentials),
	)

	userDataService := NewUserDataService()
	
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞
	api.RegisterDataServiceServer(grpcServer, userDataService)
	api.RegisterDatabaseServiceServer(grpcServer, userDataService)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	listener, listenerError := net.Listen("tcp", ":5051")
	if listenerError != nil {
		log.Fatalf("‚ùå Failed to listen: %v", listenerError)
	}

	log.Println("üîê User Data Service (gRPC Server with mTLS) running on :5051")
	log.Println("   TLS: Enabled (mutual authentication required)")
	log.Println("   Database authentication: Certificate-based (DNS Names)")
	log.Println("   Cache: FIFO3 with metrics enabled")
	log.Println("   Available commands:")
	log.Println("   - GetOrganization, GetUser, CreateUser, ListOrganizations, etc.")
	log.Println("   Registered services: DataService, DatabaseService")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞
	go func() {
		ticker := time.NewTicker(5 * time.Minute)
		defer ticker.Stop()
		
		for range ticker.C {
			metrics := userDataService.GetCacheMetrics()
			log.Printf("üìä Cache Metrics: %s", metrics)
		}
	}()

	if serveError := grpcServer.Serve(listener); serveError != nil {
		log.Fatalf("‚ùå Failed to serve: %v", serveError)
	}
}