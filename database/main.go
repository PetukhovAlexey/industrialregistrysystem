package main

import (
	"context"
	"io"
	"log"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"industrialregistrysystem/base/api"
)

func main() {
	// Data Service - –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
	dataService := NewDataService()
	
	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	for {
		err := connectAndServe(dataService)
		if err != nil {
			log.Printf("Connection failed: %v. Reconnecting in 5 seconds...", err)
			time.Sleep(5 * time.Second)
		}
	}
}

func connectAndServe(dataService *DataService) error {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ localhost:5051 —Å TLS
	tlsCredentials, err := loadTLSCredentialsClient()
	if err != nil {
		log.Printf("‚ùå Failed to load TLS credentials, using insecure: %v", err)
		// Fallback to insecure connection
		connection, err := grpc.Dial("localhost:5051", grpc.WithTransportCredentials(insecure.NewCredentials()))
		if err != nil {
			return err
		}
		defer connection.Close()
		
		return serveWithConnection(dataService, connection)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	connection, err := grpc.Dial("localhost:5051", grpc.WithTransportCredentials(tlsCredentials))
	if err != nil {
		return err
	}
	defer connection.Close()
	
	return serveWithConnection(dataService, connection)
}

func serveWithConnection(dataService *DataService, connection *grpc.ClientConn) error {
	// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç
	client := api.NewDatabaseServiceClient(connection)
	
	log.Println("üìä Data Service (Active gRPC Client) started - ready to handle DB requests")
	log.Println("   Connected to PostgreSQL database")
	log.Println("   Connected to gRPC server on localhost:5051")
	log.Println("   Establishing command channel...")
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	ctx := context.Background()
	stream, err := client.CommandStream(ctx)
	if err != nil {
		return err
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initial ready message
	err = stream.Send(&api.CommandResponse{
		RequestId: "ready",
		Response: &api.CommandResponse_Ready{
			Ready: &api.ReadyMessage{
				ServiceName: "database-service",
			},
		},
	})
	if err != nil {
		return err
	}
	
	log.Println("‚úÖ Command channel established - waiting for server commands...")
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	for {
		command, err := stream.Recv()
		if err == io.EOF {
			log.Println("Server closed connection")
			return nil
		}
		if err != nil {
			return err
		}
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
		go handleServerCommand(dataService, stream, command)
	}
}